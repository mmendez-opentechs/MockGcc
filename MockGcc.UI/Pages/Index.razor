@page "/index"

@namespace Components.Index

@using MockGcc.UI.ViewModels

@inject IMainViewModel MainViewModel

<PageTitle>Mock Gcc v5</PageTitle>

<body>
    <div style="display:flex;padding-bottom:15px;">
        <img decoding="async" width="201" height="41" src="https://open-techs.com/wp-content/uploads/2022/11/logo-header.svg">
        <div></div>
    </div>
    <div style="display:flex;flex-direction:column;gap:10px;">
        <div>
            <input type="checkbox" id="EnableHorizontalAutoscaling" @onchange="OnEnableHorizontalAutoscalingChanged" name="EnableHorizontalAutoscaling" />
            <label for="EnableHorizontalAutoscaling">Enable Horizontal Scaling Testing</label>
        </div>
        <div>
            <input type="checkbox" id="EnableVerticalAutoscaling" @onchange="OnEnableVerticalAutoscalingChanged" name="EnableVerticalAutoscaling" />
            <label for="EnableVerticalAutoscaling">Enable Vertical Scaling Testing</label>
        </div>
        <div style="display:flex;flex-direction:row;gap:10px;">
            <div style="display:flex;flex-direction:column;height:200px;width:200px;border-radius:10px;border:solid 2px #482254;">
                <div style="border-bottom:dashed;text-align:center;border-color:#97efe9;">
                    Mock EWS PersonInfo
                </div>
                <div style="flex-grow:1;padding:5px;">
                    <div>Requests/s: @MockPersonInfoRequestRate</div>
                    <div style="">
                        <input style="width:100%;" min="1" max="1500" step="10" type="range"
                               value="@MockPersonInfoRequestRate"
                               @onchange="@((args) => OnPersonInfoFrequencyChange(args?.Value?.ToString()))" />
                    </div>
                    <div style="font-size:small;">
                        Avg. Latency: @MainViewModel.MockPersonInfoLatency
                    </div>
                </div>
            </div>
            <div style="display:flex;flex-direction:column;height:200px;width:200px;border-radius:10px;border:solid 2px #482254;">
                <div style="border-bottom:dashed;text-align:center;border-color:#97efe9;">
                    Mock EWS Account
                </div>
                <div style="flex-grow:1;padding:5px;">
                    <div>Requests/s: @MockAccountRequestRate</div>
                    <div style="">
                        <input style="width:100%;" min="1" max="1500" step="10" type="range"
                               value="@MockAccountRequestRate"
                               @onchange="@((args) => OnAccountFrequencyChange(args?.Value?.ToString()))" />
                    </div>
                    <div style="font-size:small;">
                        Avg. Latency: @MainViewModel.MockAccountLatency
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>

@code
{
    private int MockPersonInfoRequestRate { get; set; } = 10;
    private int MockAccountRequestRate { get; set; } = 10;

    public void OnPersonInfoFrequencyChange(string? step)
    {
        MockPersonInfoRequestRate = Convert.ToInt32(step);

        MainViewModel.MockPersonInfoRequestRate = MockPersonInfoRequestRate;
    }

    public void OnAccountFrequencyChange(string? step)
    {
        MockAccountRequestRate = Convert.ToInt32(step);

        MainViewModel.MockAccountRequestRate = MockAccountRequestRate;
    }

    public void OnEnableHorizontalAutoscalingChanged(ChangeEventArgs e)
    {
        if (e.Value is bool isChecked) {
            MainViewModel.TestHorizontalAutoscaling = isChecked;
        }
    }

    public void OnEnableVerticalAutoscalingChanged(ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            MainViewModel.TestVerticalAutoscaling = isChecked;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        MainViewModel.PropertyChanged += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };

        await base.OnInitializedAsync();
    }
}
